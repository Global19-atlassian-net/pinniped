// Copyright 2020 the Pinniped contributors. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Package symmetricsecrethelper provides a type that can generate and validate symmetric keys as
// Secret's.
package symmetricsecrethelper

import (
	"fmt"
	"io"

	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	configv1alpha1 "go.pinniped.dev/generated/1.19/apis/supervisor/config/v1alpha1"
	"go.pinniped.dev/internal/controller/supervisorconfig/generator"
)

const (
	// SecretType is corev1.Secret.Type of all corev1.Secret's generated by this helper.
	SecretType = "secrets.pinniped.dev/symmetric"
	// SecretDataKey is the corev1.Secret.Data key for the symmetric key value generated by this helper.
	SecretDataKey = "key"

	// keySize is the default length, in bytes, of generated keys. It is set to 32 since this
	// seems like reasonable entropy for our keys, and a 32-byte key will allow for AES-256
	// to be used in our codecs (see dynamiccodec.Codec).
	keySize = 32
)

type helper struct {
	namePrefix string
	labels     map[string]string
	rand       io.Reader
	notifyFunc func(parent *configv1alpha1.OIDCProvider, child *corev1.Secret)
}

var _ generator.SecretHelper = &helper{}

// New returns a SecretHelper that has been parameterized with common symmetric secret generation
// knobs.
func New(
	namePrefix string,
	labels map[string]string,
	rand io.Reader,
	notifyFunc func(parent *configv1alpha1.OIDCProvider, child *corev1.Secret),
) generator.SecretHelper {
	return &helper{
		namePrefix: namePrefix,
		labels:     labels,
		rand:       rand,
		notifyFunc: notifyFunc,
	}
}

func (s *helper) Name() string { return s.namePrefix }

// Generate implements SecretHelper.Generate().
func (s *helper) Generate(parent *configv1alpha1.OIDCProvider) (*corev1.Secret, error) {
	key := make([]byte, keySize)
	if _, err := s.rand.Read(key); err != nil {
		return nil, err
	}

	return &corev1.Secret{
		ObjectMeta: metav1.ObjectMeta{
			Name:      fmt.Sprintf("%s%s", s.namePrefix, parent.UID),
			Namespace: parent.Namespace,
			Labels:    s.labels,
			OwnerReferences: []metav1.OwnerReference{
				*metav1.NewControllerRef(parent, schema.GroupVersionKind{
					Group:   configv1alpha1.SchemeGroupVersion.Group,
					Version: configv1alpha1.SchemeGroupVersion.Version,
					Kind:    "OIDCProvider",
				}),
			},
		},
		Type: SecretType,
		Data: map[string][]byte{
			SecretDataKey: key,
		},
	}, nil
}

// IsValid implements SecretHelper.IsValid().
func (s *helper) IsValid(parent *configv1alpha1.OIDCProvider, child *corev1.Secret) bool {
	if !metav1.IsControlledBy(child, parent) {
		return false
	}

	if child.Type != SecretType {
		return false
	}

	key, ok := child.Data[SecretDataKey]
	if !ok {
		return false
	}
	if len(key) != keySize {
		return false
	}

	return true
}

// Notify implements SecretHelper.Notify().
func (s *helper) Notify(parent *configv1alpha1.OIDCProvider, child *corev1.Secret) {
	s.notifyFunc(parent, child)
}
