// Copyright 2020 the Pinniped contributors. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "go.pinniped.dev/generated/1.18/apis/idp/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WebhookIdentityProviderLister helps list WebhookIdentityProviders.
type WebhookIdentityProviderLister interface {
	// List lists all WebhookIdentityProviders in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.WebhookIdentityProvider, err error)
	// WebhookIdentityProviders returns an object that can list and get WebhookIdentityProviders.
	WebhookIdentityProviders(namespace string) WebhookIdentityProviderNamespaceLister
	WebhookIdentityProviderListerExpansion
}

// webhookIdentityProviderLister implements the WebhookIdentityProviderLister interface.
type webhookIdentityProviderLister struct {
	indexer cache.Indexer
}

// NewWebhookIdentityProviderLister returns a new WebhookIdentityProviderLister.
func NewWebhookIdentityProviderLister(indexer cache.Indexer) WebhookIdentityProviderLister {
	return &webhookIdentityProviderLister{indexer: indexer}
}

// List lists all WebhookIdentityProviders in the indexer.
func (s *webhookIdentityProviderLister) List(selector labels.Selector) (ret []*v1alpha1.WebhookIdentityProvider, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WebhookIdentityProvider))
	})
	return ret, err
}

// WebhookIdentityProviders returns an object that can list and get WebhookIdentityProviders.
func (s *webhookIdentityProviderLister) WebhookIdentityProviders(namespace string) WebhookIdentityProviderNamespaceLister {
	return webhookIdentityProviderNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WebhookIdentityProviderNamespaceLister helps list and get WebhookIdentityProviders.
type WebhookIdentityProviderNamespaceLister interface {
	// List lists all WebhookIdentityProviders in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.WebhookIdentityProvider, err error)
	// Get retrieves the WebhookIdentityProvider from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.WebhookIdentityProvider, error)
	WebhookIdentityProviderNamespaceListerExpansion
}

// webhookIdentityProviderNamespaceLister implements the WebhookIdentityProviderNamespaceLister
// interface.
type webhookIdentityProviderNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WebhookIdentityProviders in the indexer for a given namespace.
func (s webhookIdentityProviderNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.WebhookIdentityProvider, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WebhookIdentityProvider))
	})
	return ret, err
}

// Get retrieves the WebhookIdentityProvider from the indexer for a given namespace and name.
func (s webhookIdentityProviderNamespaceLister) Get(name string) (*v1alpha1.WebhookIdentityProvider, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("webhookidentityprovider"), name)
	}
	return obj.(*v1alpha1.WebhookIdentityProvider), nil
}
